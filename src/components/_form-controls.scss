@use "../variables";

select {
  padding: map-get(variables.$form-controls-padding-y, "sm")
    map-get(variables.$form-controls-padding-x, "sm") + 1rem
    map-get(variables.$form-controls-padding-y, "sm")
    map-get(variables.$form-controls-padding-x, "sm");
  color: map-get(variables.$colors, "body");
  appearance: none;
  background-repeat: no-repeat;
  background-position: right 0.8rem center;
  background-image: url(../../images/select-arrow.png);
  background-size: 0.5rem;
  height: map-get(variables.$form-controls-height, "sm");
  border: 1px solid map-get(variables.$colors, "border");
  border-radius: map-get(variables.$radius, "lg");
  background-color: transparent;
  transition: border-color variables.$transition-duration;
  outline: none;

  &.small {
    font-size: 0.875rem;
    height: map-get(variables.$form-controls-height, "xs");
    border-radius: map-get(variables.$radius, "sm");
  }

  &.large {
    height: map-get(variables.$form-controls-height, "lg");
  }

  &:focus {
    border-color: map-get(variables.$colors, "primary");
  }

  &:disabled {
    background-color: map-get(variables.$colors, "grey-light");
    pointer-events: none;
  }
}

input:not([type="checkbox"]),
textarea {
  border: 1px solid map-get(variables.$colors, "border");
  border-radius: map-get(variables.$radius, "lg");
  background-color: transparent;
  transition: border-color variables.$transition-duration;
  outline: none;
}

input:not([type="checkbox"]) {
  height: map-get(variables.$form-controls-height, "sm");
}

input.small:not([type="checkbox"]) {
  font-size: 0.875rem;
  height: map-get(variables.$form-controls-height, "xs");
  border-radius: map-get(variables.$radius, "sm");
}

input.large:not([type="checkbox"]) {
  height: map-get(variables.$form-controls-height, "lg");
}

input:not([type="checkbox"]),
textarea {
  padding: map-get(variables.$form-controls-padding-y, "sm")
    map-get(variables.$form-controls-padding-x, "sm");
  font-family: variables.$font-family;
  width: 100%;
}

.input-with-icon {
  position: relative;
  width: 100%;
}

.input-with-icon.left-icon input {
  padding-left: 2.8rem;
}

.input-with-icon.right-icon input {
  padding-right: 2.8rem;
}

.input-with-icon .left,
.input-with-icon .right {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

.input-with-icon .left {
  left: 1rem;
  color: map-get(variables.$colors, "body-light");
  margin: 0;
}

.input-with-icon .right {
  right: 0.2rem;
}

.input-with-icon input.large + .right {
  right: 0.4rem;
}

.input {
  display: flex;
  flex-direction: column;
  gap: 0.3rem;
}

.input-group {
  display: flex;
}

.input-group > :first-child {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.input-group > :last-child {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  margin-left: -1px;
}

.input-group > :focus {
  z-index: 1;
}

.time-range {
  display: flex;
  justify-content: space-between;
  gap: 1rem;
}

.time-range .input {
  width: 100%;
}

.input-group input[type="time"]::-webkit-calendar-picker-indicator {
  display: none;
}

.input-group input[type="time"] {
  max-width: 5rem;
}

.input-group input[type="date"] {
  max-width: 100%;
}

input:focus,
textarea:focus {
  border-color: map-get(variables.$colors, "primary");
}

input:disabled,
textarea:disabled {
  background-color: map-get(variables.$colors, "grey-light");
  pointer-events: none;
}

input[type="date"] {
  color: map-get(variables.$colors, "body");
}
